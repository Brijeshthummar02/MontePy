image: python:latest

include: 
  - templates/install.yml
  - templates/test.yml

variables:
  PYTHON_VER: "3.8"
  CONDA_BASE_NAME: experiment_analysis_montepy

default:
  artifacts:
    expire_in: 7 day

after_script:
  - export PATH=$(echo "$PATH" | sed -e 's/:\/data\/gitlab-runner\/.conda\/envs\/experiment_analysis_mcnpy\/$//')
  - echo $PATH
  - conda deactivate

install-3.8:
  stage: build
  extends: .install
  variables:
    PYTHON_VER: "3.8"

install-3.9:
  stage: build
  extends: .install
  variables:
    PYTHON_VER: "3.9"
  when: delayed
  start_in: 1 minutes


install-3.10:
  stage: build
  extends: .install
  variables:
    PYTHON_VER: "3.10"
  when: delayed
  start_in: 1 minutes

install-3.11:
  stage: build
  extends: .install
  variables:
    PYTHON_VER: "3.11"
  when: delayed
  start_in: 1 minutes

install-3.12:
  stage: build
  extends: .install
  variables:
    PYTHON_VER: "3.12"
  when: delayed
  start_in: 1 minutes

coverage_unit_test:
  stage: test
  coverage: '/TOTAL.+ ([0-9\.]{1,5}%)/'
  script:
    - conda activate $CONDA_BASE_NAME-$PYTHON_VER
    - export PATH="~/.local/bin/:/data/gitlab-runner/.conda/envs/$CONDA_BASE_NAME-$PYTHON_VER/bin:$PATH"
    - echo $PATH
    - echo "Executing unit tests"
    - which python
    - pip freeze
    - coverage run -m pytest --junitxml=test_report.xml
    - coverage report 
    - coverage xml
  artifacts:
    reports:
      junit: test_report.xml
      coverage_report:
         coverage_format: cobertura
         path: coverage.xml
  needs: ["install-3.8"]

# skip 3.8 because of coverage test

unit_test-3.9:
  stage: test
  extends: .test_no_cover
  variables:
    PYTHON_VER: "3.9"
  needs: ["install-3.9"]
  when: delayed
  start_in: 1 minutes

unit_test-3.10:
  stage: test
  extends: .test_no_cover
  variables:
    PYTHON_VER: "3.10"
  needs: ["install-3.10"]
  when: delayed
  start_in: 1 minutes

unit_test-3.11:
  stage: test
  extends: .test_no_cover
  variables:
    PYTHON_VER: "3.11"
  needs: ["install-3.11"]
  when: delayed
  start_in: 1 minutes

unit_test-3.12:
  stage: test
  extends: .test_no_cover
  variables:
    PYTHON_VER: "3.12"
  needs: ["install-3.12"]
  when: delayed
  start_in: 1 minutes

doc_test:
   stage: test
   script:
      - conda activate $CONDA_BASE_NAME-$PYTHON_VER
      - export PATH="~/.local/bin/:/data/gitlab-runner/.conda/envs/$CONDA_BASE_NAME-$PYTHON_VER/bin:$PATH"
      - echo "Executing Sphinx build to detect syntax errors"
      - sphinx-build doc/source/ doc/build/ -W --keep-going -E
      - sphinx-build -b html doc/source/ doc/build/html
      - mv doc/build/html html
   needs: ["install-3.8"]
   artifacts:
     expose_as: 'Updated Documentation'
     paths: 
       - html
     expire_in: 1 day

format_test:
  stage: test
  script: 
    - conda activate $CONDA_BASE_NAME-$PYTHON_VER
    - export PATH="~/.local/bin/:/data/gitlab-runner/.conda/envs/$CONDA_BASE_NAME-$PYTHON_VER/bin:$PATH"
    - echo "Testing if anything is unformatted"
    - echo "If error occurs changes were not formatted using black"
    - black --check montepy/ tests/
  needs: ["install-3.8"]



pages:
  stage: deploy
  script:
    - conda activate $CONDA_BASE_NAME-$PYTHON_VER
    - export PATH="~/.local/bin/:/data/gitlab-runner/.conda/envs/$CONDA_BASE_NAME-$PYTHON_VER/bin:$PATH"
    - echo "Building documentation with Sphinx."
    - cd doc/
    - make html
    - cd ..
    - mv doc/build/html public
    - python -m build --sdist --wheel
    - mv dist/ public/dist
  artifacts:
    paths:
      - public
  only:
    - master
    - main
    - doc


packaging:
  script:
    - rm dist/*
    - conda activate $CONDA_BASE_NAME-$PYTHON_VER
    - export PATH="~/.local/bin/:/data/gitlab-runner/.conda/envs/$CONDA_BASE_NAME-$PYTHON_VER/bin:$PATH"
    - pip install build twine
    - python -m build --sdists --wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

  only:
    - master
    - main
